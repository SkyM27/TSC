# 1
# Model Technology ModelSim - Intel FPGA Edition vlog 10.5c Compiler 2017.01 Jan 23 2017
# Start time: 19:45:15 on Apr 16,2024
# vlog -sv -timescale 1ps/1ps -work work -f sources.txt 
# -- Compiling package instr_register_pkg
# -- Compiling module instr_register
# -- Importing package instr_register_pkg
# -- Compiling module instr_register_test
# ** Warning: (vlog-2121) ../lab01_testbench-interface/instr_register_test.sv(121): Illegal concatenation of an unsized constant. Will treat it as a 32-bit value.
# ** Warning: (vlog-2121) ../lab01_testbench-interface/instr_register_test.sv(153): Illegal concatenation of an unsized constant. Will treat it as a 32-bit value.
# ** Warning: (vlog-2121) ../lab01_testbench-interface/instr_register_test.sv(157): Illegal concatenation of an unsized constant. Will treat it as a 32-bit value.
# -- Compiling module top
# 
# Top level modules:
# 	top
# End time: 19:45:15 on Apr 16,2024, Elapsed time: 0:00:00
# Errors: 0, Warnings: 3
# vsim -novopt -quiet -nocoverage "+notimingchecks" "+nowarnTSCALE" -sva top -GTEST_NAME=case_RAND_RAND39 -GWR_NR=50 -GRD_NR=32 -GWRITE_ORDER=2 -GSEED_VAL=738495 -GREAD_ORDER=2 
# Start time: 19:45:15 on Apr 16,2024
# 
# 
# ***********************************************************
# ********  THIS IS A SELF-CHECKING TESTBENCH.  YOU  ********
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# 
# Reseting the instruction register...
# 
# Writing values to register stack...
# At write pointer = 23:, timp 36: 
#   opcode = 13 
#   operand_a = 0
#   operand_b = 2
# 
# Writing to register location 23: 
#   opcode = 13 ()
#   operand_a = 0
#   operand_b = 2
# 
#   result = 0
# 
# At write pointer = 25:, timp 46: 
#   opcode = 4 
#   operand_a = 2
#   operand_b = -10
# 
# Writing to register location 25: 
#   opcode = 4 (SUB)
#   operand_a = 2
#   operand_b = -10
# 
#   result = 0
# 
# At write pointer = 19:, timp 56: 
#   opcode = 0 
#   operand_a = -10
#   operand_b = 8
# 
# Writing to register location 19: 
#   opcode = 0 (ZERO)
#   operand_a = -10
#   operand_b = 8
# 
#   result = 0
# 
# At write pointer = 5:, timp 66: 
#   opcode = 3 
#   operand_a = 8
#   operand_b = -13
# 
# Writing to register location 5: 
#   opcode = 3 (ADD)
#   operand_a = 8
#   operand_b = -13
# 
#   result = 0
# 
# At write pointer = 3:, timp 76: 
#   opcode = 8 
#   operand_a = -13
#   operand_b = 6
# 
# Writing to register location 3: 
#   opcode = 8 (POW)
#   operand_a = -13
#   operand_b = 6
# 
#   result = 0
# 
# At write pointer = 11:, timp 86: 
#   opcode = 0 
#   operand_a = 6
#   operand_b = -2
# 
# Writing to register location 11: 
#   opcode = 0 (ZERO)
#   operand_a = 6
#   operand_b = -2
# 
#   result = 0
# 
# At write pointer = 25:, timp 96: 
#   opcode = 13 
#   operand_a = -2
#   operand_b = 2
# 
# Writing to register location 25: 
#   opcode = 13 ()
#   operand_a = -2
#   operand_b = 2
# 
#   result = 0
# 
# At write pointer = 26:, timp 106: 
#   opcode = 9 
#   operand_a = 2
#   operand_b = -3
# 
# Writing to register location 26: 
#   opcode = 9 ()
#   operand_a = 2
#   operand_b = -3
# 
#   result = 0
# 
# At write pointer = 2:, timp 116: 
#   opcode = 8 
#   operand_a = -3
#   operand_b = -8
# 
# Writing to register location 2: 
#   opcode = 8 (POW)
#   operand_a = -3
#   operand_b = -8
# 
#   result = 0
# 
# At write pointer = 2:, timp 126: 
#   opcode = 15 
#   operand_a = -8
#   operand_b = -10
# 
# Writing to register location 2: 
#   opcode = 15 ()
#   operand_a = -8
#   operand_b = -10
# 
#   result = 0
# 
# At write pointer = 1:, timp 136: 
#   opcode = 11 
#   operand_a = -10
#   operand_b = -10
# 
# Writing to register location 1: 
#   opcode = 11 ()
#   operand_a = -10
#   operand_b = -10
# 
#   result = 0
# 
# At write pointer = 18:, timp 146: 
#   opcode = 7 
#   operand_a = -10
#   operand_b = -15
# 
# Writing to register location 18: 
#   opcode = 7 (MOD)
#   operand_a = -10
#   operand_b = -15
# 
#   result = 0
# 
# At write pointer = 31:, timp 156: 
#   opcode = 7 
#   operand_a = -15
#   operand_b = 0
# 
# Writing to register location 31: 
#   opcode = 7 (MOD)
#   operand_a = -15
#   operand_b = 0
# 
#   result = 0
# 
# At write pointer = 11:, timp 166: 
#   opcode = 4 
#   operand_a = 0
#   operand_b = 13
# 
# Writing to register location 11: 
#   opcode = 4 (SUB)
#   operand_a = 0
#   operand_b = 13
# 
#   result = 0
# 
# At write pointer = 16:, timp 176: 
#   opcode = 11 
#   operand_a = 13
#   operand_b = 13
# 
# Writing to register location 16: 
#   opcode = 11 ()
#   operand_a = 13
#   operand_b = 13
# 
#   result = 0
# 
# At write pointer = 10:, timp 186: 
#   opcode = 0 
#   operand_a = 13
#   operand_b = -8
# 
# Writing to register location 10: 
#   opcode = 0 (ZERO)
#   operand_a = 13
#   operand_b = -8
# 
#   result = 0
# 
# At write pointer = 1:, timp 196: 
#   opcode = 5 
#   operand_a = -8
#   operand_b = 7
# 
# Writing to register location 1: 
#   opcode = 5 (MULT)
#   operand_a = -8
#   operand_b = 7
# 
#   result = 0
# 
# At write pointer = 0:, timp 206: 
#   opcode = 4 
#   operand_a = 7
#   operand_b = 10
# 
# Writing to register location 0: 
#   opcode = 4 (SUB)
#   operand_a = 7
#   operand_b = 10
# 
#   result = 0
# 
# At write pointer = 29:, timp 216: 
#   opcode = 11 
#   operand_a = 10
#   operand_b = 2
# 
# Writing to register location 29: 
#   opcode = 11 ()
#   operand_a = 10
#   operand_b = 2
# 
#   result = 0
# 
# At write pointer = 27:, timp 226: 
#   opcode = 0 
#   operand_a = 2
#   operand_b = -5
# 
# Writing to register location 27: 
#   opcode = 0 (ZERO)
#   operand_a = 2
#   operand_b = -5
# 
#   result = 0
# 
# At write pointer = 26:, timp 236: 
#   opcode = 7 
#   operand_a = -5
#   operand_b = 12
# 
# Writing to register location 26: 
#   opcode = 7 (MOD)
#   operand_a = -5
#   operand_b = 12
# 
#   result = 0
# 
# At write pointer = 28:, timp 246: 
#   opcode = 0 
#   operand_a = 12
#   operand_b = 7
# 
# Writing to register location 28: 
#   opcode = 0 (ZERO)
#   operand_a = 12
#   operand_b = 7
# 
#   result = 0
# 
# At write pointer = 0:, timp 256: 
#   opcode = 4 
#   operand_a = 7
#   operand_b = 8
# 
# Writing to register location 0: 
#   opcode = 4 (SUB)
#   operand_a = 7
#   operand_b = 8
# 
#   result = 0
# 
# At write pointer = 29:, timp 266: 
#   opcode = 10 
#   operand_a = 8
#   operand_b = 3
# 
# Writing to register location 29: 
#   opcode = 10 ()
#   operand_a = 8
#   operand_b = 3
# 
#   result = 0
# 
# At write pointer = 23:, timp 276: 
#   opcode = 0 
#   operand_a = 3
#   operand_b = -10
# 
# Writing to register location 23: 
#   opcode = 0 (ZERO)
#   operand_a = 3
#   operand_b = -10
# 
#   result = 0
# 
# At write pointer = 7:, timp 286: 
#   opcode = 6 
#   operand_a = -10
#   operand_b = 11
# 
# Writing to register location 7: 
#   opcode = 6 (DIV)
#   operand_a = -10
#   operand_b = 11
# 
#   result = 0
# 
# At write pointer = 30:, timp 296: 
#   opcode = 13 
#   operand_a = 11
#   operand_b = 7
# 
# Writing to register location 30: 
#   opcode = 13 ()
#   operand_a = 11
#   operand_b = 7
# 
#   result = 0
# 
# At write pointer = 11:, timp 306: 
#   opcode = 9 
#   operand_a = 7
#   operand_b = -15
# 
# Writing to register location 11: 
#   opcode = 9 ()
#   operand_a = 7
#   operand_b = -15
# 
#   result = 0
# 
# At write pointer = 7:, timp 316: 
#   opcode = 15 
#   operand_a = -15
#   operand_b = -12
# 
# Writing to register location 7: 
#   opcode = 15 ()
#   operand_a = -15
#   operand_b = -12
# 
#   result = 0
# 
# At write pointer = 20:, timp 326: 
#   opcode = 1 
#   operand_a = -12
#   operand_b = -4
# 
# Writing to register location 20: 
#   opcode = 1 (PASSA)
#   operand_a = -12
#   operand_b = -4
# 
#   result = 0
# 
# At write pointer = 18:, timp 336: 
#   opcode = 0 
#   operand_a = -4
#   operand_b = 7
# 
# Writing to register location 18: 
#   opcode = 0 (ZERO)
#   operand_a = -4
#   operand_b = 7
# 
#   result = 0
# 
# At write pointer = 13:, timp 346: 
#   opcode = 8 
#   operand_a = 7
#   operand_b = 3
# 
# Writing to register location 13: 
#   opcode = 8 (POW)
#   operand_a = 7
#   operand_b = 3
# 
#   result = 0
# 
# At write pointer = 4:, timp 356: 
#   opcode = 4 
#   operand_a = 3
#   operand_b = 0
# 
# Writing to register location 4: 
#   opcode = 4 (SUB)
#   operand_a = 3
#   operand_b = 0
# 
#   result = 0
# 
# At write pointer = 31:, timp 366: 
#   opcode = 8 
#   operand_a = 0
#   operand_b = 12
# 
# Writing to register location 31: 
#   opcode = 8 (POW)
#   operand_a = 0
#   operand_b = 12
# 
#   result = 0
# 
# At write pointer = 13:, timp 376: 
#   opcode = 11 
#   operand_a = 12
#   operand_b = -9
# 
# Writing to register location 13: 
#   opcode = 11 ()
#   operand_a = 12
#   operand_b = -9
# 
#   result = 0
# 
# At write pointer = 27:, timp 386: 
#   opcode = 3 
#   operand_a = -9
#   operand_b = -15
# 
# Writing to register location 27: 
#   opcode = 3 (ADD)
#   operand_a = -9
#   operand_b = -15
# 
#   result = 0
# 
# At write pointer = 6:, timp 396: 
#   opcode = 4 
#   operand_a = -15
#   operand_b = 10
# 
# Writing to register location 6: 
#   opcode = 4 (SUB)
#   operand_a = -15
#   operand_b = 10
# 
#   result = 0
# 
# At write pointer = 8:, timp 406: 
#   opcode = 0 
#   operand_a = 10
#   operand_b = 7
# 
# Writing to register location 8: 
#   opcode = 0 (ZERO)
#   operand_a = 10
#   operand_b = 7
# 
#   result = 0
# 
# At write pointer = 21:, timp 416: 
#   opcode = 4 
#   operand_a = 7
#   operand_b = 7
# 
# Writing to register location 21: 
#   opcode = 4 (SUB)
#   operand_a = 7
#   operand_b = 7
# 
#   result = 0
# 
# At write pointer = 22:, timp 426: 
#   opcode = 3 
#   operand_a = 7
#   operand_b = 3
# 
# Writing to register location 22: 
#   opcode = 3 (ADD)
#   operand_a = 7
#   operand_b = 3
# 
#   result = 0
# 
# At write pointer = 7:, timp 436: 
#   opcode = 9 
#   operand_a = 3
#   operand_b = 2
# 
# Writing to register location 7: 
#   opcode = 9 ()
#   operand_a = 3
#   operand_b = 2
# 
#   result = 0
# 
# At write pointer = 27:, timp 446: 
#   opcode = 10 
#   operand_a = 2
#   operand_b = 0
# 
# Writing to register location 27: 
#   opcode = 10 ()
#   operand_a = 2
#   operand_b = 0
# 
#   result = 0
# 
# At write pointer = 20:, timp 456: 
#   opcode = 13 
#   operand_a = 0
#   operand_b = -14
# 
# Writing to register location 20: 
#   opcode = 13 ()
#   operand_a = 0
#   operand_b = -14
# 
#   result = 0
# 
# At write pointer = 6:, timp 466: 
#   opcode = 14 
#   operand_a = -14
#   operand_b = -13
# 
# Writing to register location 6: 
#   opcode = 14 ()
#   operand_a = -14
#   operand_b = -13
# 
#   result = 0
# 
# At write pointer = 26:, timp 476: 
#   opcode = 1 
#   operand_a = -13
#   operand_b = -8
# 
# Writing to register location 26: 
#   opcode = 1 (PASSA)
#   operand_a = -13
#   operand_b = -8
# 
#   result = 0
# 
# At write pointer = 20:, timp 486: 
#   opcode = 3 
#   operand_a = -8
#   operand_b = 0
# 
# Writing to register location 20: 
#   opcode = 3 (ADD)
#   operand_a = -8
#   operand_b = 0
# 
#   result = 0
# 
# At write pointer = 30:, timp 496: 
#   opcode = 3 
#   operand_a = 0
#   operand_b = 3
# 
# Writing to register location 30: 
#   opcode = 3 (ADD)
#   operand_a = 0
#   operand_b = 3
# 
#   result = 0
# 
# At write pointer = 2:, timp 506: 
#   opcode = 4 
#   operand_a = 3
#   operand_b = 4
# 
# Writing to register location 2: 
#   opcode = 4 (SUB)
#   operand_a = 3
#   operand_b = 4
# 
#   result = 0
# 
# At write pointer = 28:, timp 516: 
#   opcode = 12 
#   operand_a = 4
#   operand_b = 13
# 
# Writing to register location 28: 
#   opcode = 12 ()
#   operand_a = 4
#   operand_b = 13
# 
#   result = 0
# 
# At write pointer = 4:, timp 526: 
#   opcode = 6 
#   operand_a = 13
#   operand_b = -6
# 
# Writing to register location 4: 
#   opcode = 6 (DIV)
#   operand_a = 13
#   operand_b = -6
# 
#   result = 0
# 
# 
# Reading back the same register locations written...
# Read from register location 27: 
#   opcode = 3 (ADD)
#   operand_a = -9
#   operand_b = -15
# 
#   result = -24
# 
# Fail counter: 0
# 
# Read from register location 8: 
#   opcode = 0 (ZERO)
#   operand_a = 10
#   operand_b = 7
# 
#   result = 0
# 
# Fail counter: 0
# 
# Read value matches expected value
#   Expected(DUT): 0
#   Read(TEST): 0
# Read from register location 16: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   result = 0
# 
# Fail counter: 0
# 
# Read from register location 22: 
#   opcode = 3 (ADD)
#   operand_a = 7
#   operand_b = 3
# 
#   result = 10
# 
# Fail counter: 0
# 
# Read value matches expected value
#   Expected(DUT): 10
#   Read(TEST): 10
# Read from register location 19: 
#   opcode = 0 (ZERO)
#   operand_a = -10
#   operand_b = 8
# 
#   result = 0
# 
# Fail counter: 0
# 
# Read value matches expected value
#   Expected(DUT): 0
#   Read(TEST): 0
# Read from register location 3: 
#   opcode = 8 (POW)
#   operand_a = -13
#   operand_b = 6
# 
#   result = 4826809
# 
# Fail counter: 0
# 
# Read value matches expected value
#   Expected(DUT): 4826809
#   Read(TEST): 4826809
# Read from register location 26: 
#   opcode = 1 (PASSA)
#   operand_a = -13
#   operand_b = -8
# 
#   result = -13
# 
# Fail counter: 0
# 
# Read value matches expected value
#   Expected(DUT): -13
#   Read(TEST): -13
# Read from register location 13: 
#   opcode = 8 (POW)
#   operand_a = 7
#   operand_b = 3
# 
#   result = 343
# 
# Fail counter: 0
# 
# Read from register location 13: 
#   opcode = 8 (POW)
#   operand_a = 7
#   operand_b = 3
# 
#   result = 343
# 
# Fail counter: 0
# 
# Read from register location 25: 
#   opcode = 4 (SUB)
#   operand_a = 2
#   operand_b = -10
# 
#   result = 12
# 
# Fail counter: 0
# 
# Read from register location 3: 
#   opcode = 8 (POW)
#   operand_a = -13
#   operand_b = 6
# 
#   result = 4826809
# 
# Fail counter: 0
# 
# Read value matches expected value
#   Expected(DUT): 4826809
#   Read(TEST): 4826809
# Read from register location 4: 
#   opcode = 6 (DIV)
#   operand_a = 13
#   operand_b = -6
# 
#   result = -2
# 
# Fail counter: 0
# 
# Read value matches expected value
#   Expected(DUT): -2
#   Read(TEST): -2
# Read from register location 9: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   result = 0
# 
# Fail counter: 0
# 
# Read value matches expected value
#   Expected(DUT): 0
#   Read(TEST): 0
# Read from register location 15: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   result = 0
# 
# Fail counter: 0
# 
# Read value matches expected value
#   Expected(DUT): 0
#   Read(TEST): 0
# Read from register location 15: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   result = 0
# 
# Fail counter: 0
# 
# Read value matches expected value
#   Expected(DUT): 0
#   Read(TEST): 0
# Read from register location 23: 
#   opcode = 0 (ZERO)
#   operand_a = 3
#   operand_b = -10
# 
#   result = 0
# 
# Fail counter: 0
# 
# Read value matches expected value
#   Expected(DUT): 0
#   Read(TEST): 0
# Read from register location 6: 
#   opcode = 4 (SUB)
#   operand_a = -15
#   operand_b = 10
# 
#   result = -25
# 
# Fail counter: 0
# 
# Read from register location 4: 
#   opcode = 6 (DIV)
#   operand_a = 13
#   operand_b = -6
# 
#   result = -2
# 
# Fail counter: 0
# 
# Read value matches expected value
#   Expected(DUT): -2
#   Read(TEST): -2
# Read from register location 13: 
#   opcode = 8 (POW)
#   operand_a = 7
#   operand_b = 3
# 
#   result = 343
# 
# Fail counter: 0
# 
# Read from register location 14: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   result = 0
# 
# Fail counter: 0
# 
# Read value matches expected value
#   Expected(DUT): 0
#   Read(TEST): 0
# Read from register location 29: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   result = 0
# 
# Fail counter: 0
# 
# Read from register location 22: 
#   opcode = 3 (ADD)
#   operand_a = 7
#   operand_b = 3
# 
#   result = 10
# 
# Fail counter: 0
# 
# Read value matches expected value
#   Expected(DUT): 10
#   Read(TEST): 10
# Read from register location 7: 
#   opcode = 6 (DIV)
#   operand_a = -10
#   operand_b = 11
# 
#   result = 0
# 
# Fail counter: 0
# 
# Read from register location 17: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   result = 0
# 
# Fail counter: 0
# 
# Read value matches expected value
#   Expected(DUT): 0
#   Read(TEST): 0
# Read from register location 26: 
#   opcode = 1 (PASSA)
#   operand_a = -13
#   operand_b = -8
# 
#   result = -13
# 
# Fail counter: 0
# 
# Read value matches expected value
#   Expected(DUT): -13
#   Read(TEST): -13
# Read from register location 30: 
#   opcode = 3 (ADD)
#   operand_a = 0
#   operand_b = 3
# 
#   result = 3
# 
# Fail counter: 0
# 
# Read value matches expected value
#   Expected(DUT): 3
#   Read(TEST): 3
# Read from register location 22: 
#   opcode = 3 (ADD)
#   operand_a = 7
#   operand_b = 3
# 
#   result = 10
# 
# Fail counter: 0
# 
# Read value matches expected value
#   Expected(DUT): 10
#   Read(TEST): 10
# Read from register location 8: 
#   opcode = 0 (ZERO)
#   operand_a = 10
#   operand_b = 7
# 
#   result = 0
# 
# Fail counter: 0
# 
# Read value matches expected value
#   Expected(DUT): 0
#   Read(TEST): 0
# Read from register location 20: 
#   opcode = 3 (ADD)
#   operand_a = -8
#   operand_b = 0
# 
#   result = -8
# 
# Fail counter: 0
# 
# Read value matches expected value
#   Expected(DUT): -8
#   Read(TEST): -8
# Read from register location 1: 
#   opcode = 5 (MULT)
#   operand_a = -8
#   operand_b = 7
# 
#   result = -56
# 
# Fail counter: 0
# 
# Read value matches expected value
#   Expected(DUT): -56
#   Read(TEST): -56
# Read from register location 0: 
#   opcode = 4 (SUB)
#   operand_a = 7
#   operand_b = 8
# 
#   result = -1
# 
# Fail counter: 0
# 
# Read value matches expected value
#   Expected(DUT): -1
#   Read(TEST): -1
# Read from register location 11: 
#   opcode = 4 (SUB)
#   operand_a = 0
#   operand_b = 13
# 
#   result = -13
# 
# Fail counter: 0
# 
# 
# ***********************************************************
# ********  THIS IS A SELF-CHECKING TESTBENCH.  YOU  ********
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# 
# ** Note: $finish    : ../lab01_testbench-interface/instr_register_test.sv(81)
#    Time: 866 ns  Iteration: 1  Instance: /top/test
# End time: 19:45:15 on Apr 16,2024, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
